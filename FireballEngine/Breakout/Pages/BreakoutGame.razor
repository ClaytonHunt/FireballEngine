@using Breakout.Graphics
@using FireballEngine.Core.Graphics
@using FireballEngine.Core.Math
@using System.Runtime.InteropServices

<WebGLShader @ref=VertexShader2D>#version 300 es
    // Vertex Shader
    layout(location = 0) in vec4 aColor;
    layout(location = 1) in vec3 aPosition;
    out vec4 fColor;
    
    void main()
    {
        fColor = aColor;
        gl_Position = vec4(aPosition, 1.0);
    }
</WebGLShader>

<WebGLShader @ref=FragmentShader2D>#version 300 es
    // Fragment shader
    precision highp float;

    out vec4 FragColor;
    in vec4 fColor;

    void main()
    {
        FragColor = fColor;
    }
</WebGLShader>

@code {
    [CascadingParameter]
    public IGraphicsDevice GraphicsDevice { get; set; } = default!;

    private WebGLShader VertexShader2D { get; set; } = new WebGLShader();
    private WebGLShader FragmentShader2D { get; set; } = new WebGLShader();
    private IList<ColorVertex> Triangles = new List<ColorVertex>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Rendering Game Component");

            await GraphicsDevice.Initialize();
            await GraphicsDevice.LoadShaders(VertexShader2D.Source, FragmentShader2D.Source);

            Triangles = new ColorVertex[]
            {
                // Triangle #1
                new ColorVertex(new Color(1f, 0f, 0f, 1.0f), new Vertex(-0.5f, -0.5f, 0.0f)),
                new ColorVertex(new Color(0f, 1f, 0f, 1.0f), new Vertex(-0.5f, 0.5f, 0.0f)),
                new ColorVertex(new Color(0f, 0f, 1f, 1.0f), new Vertex(0.5f, 0.5f, 0.0f)),

                // Triangle #2
                new ColorVertex(new Color(0f, 0f, 1f, 1.0f), new Vertex(0.5f, 0.5f, 0.0f)),
                new ColorVertex(new Color(1f, 1f, 0f, 1.0f), new Vertex(0.5f, -0.5f, 0.0f)),
                new ColorVertex(new Color(1f, 0f, 0f, 1.0f), new Vertex(-0.5f, -0.5f, 0.0f))
            };

            await GraphicsDevice.CreatePrimitives<ColorVertex>("First Shape", Triangles, 4, 3);

            GraphicsDevice.OnFrame += async (gameTime) =>
            {
                await Update(gameTime);
                await Render();
            };
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Task Update(GameTime gameTime)
    {
        return Task.CompletedTask;
    }

    private async Task Render()
    {
        await GraphicsDevice.Clear(Color.CornFlowerBlue);
        await GraphicsDevice.DrawPrimitives("First Shape", 0, Triangles.Count);
    }
}
